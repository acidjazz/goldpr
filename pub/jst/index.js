var Index;

Index = {
  vals: [],
  cache: {
    window: window,
    stickied: false
  },
  i: function() {
    Index.cache.window = $(window);
    Index.handlers();
    if (Index.cache.window.width() > 1000) {
      setInterval(Index.header, 20);
    }
    setInterval(Index.check, 10);
    if (location.hash !== '') {
      return _.on(".option_" + (location.hash.replace('#', '')));
    }
  },
  handlers: function() {
    return $('header > .inner > .menu > .option').click(Index.option);
  },
  option: function(e) {
    var hash;
    hash = $(this).html();
    _.off('header > .inner > .menu > .option');
    _.on(".option_" + hash);
    e.preventDefault();
    location.hash = hash;
    return $('html, body').scrollTo("#" + hash, {
      offset: -60
    });
  },
  header: function() {
    var stickySpot;
    stickySpot = 200;
    if (Index.cache.window.scrollTop() > stickySpot && Index.cache.stickied === false) {
      _.on('#sticky');
      Index.cache.stickied = true;
    }
    if (Index.cache.window.scrollTop() < stickySpot && Index.cache.stickied === true) {
      _.off('#sticky');
      return Index.cache.stickied = false;
    }
  },
  check: function() {
    return $('.laxin').each(function(i, el) {
      var diff, jel, perc, ref, ref1, thresh, val;
      if (Index.inViewport(el)) {
        ref = Index.viewable(el), perc = ref[0], diff = ref[1];
        jel = $(el);
        thresh = jel.data('thresh');
        if (thresh === void 0) {
          thresh = 50;
        }
        if (perc > thresh && jel.hasClass('off')) {
          _.on(jel);
        }
        if (perc < thresh && jel.hasClass('on')) {
          _.off(jel);
        }
        if (Index.cache.window.width() > 1000) {
          if (jel.hasClass('laxin_vert')) {
            val = Math.round(diff);
            if (((ref1 = Index.vals) != null ? ref1[i] : void 0) !== val) {
              jel.find('.inner:first').css('transform', "translate3d(0, " + (val * 3) + "px, 0px)");
              jel.find('.overlay').css('transform', "translate3d(0, " + val + "px, 0px)");
              jel.find('.overlay > .inner').css('transform', "translate3d(0, " + (val / 4) + "px, 0px)");
              return Index.vals[i] = val;
            }
          }
        }
      }
    });
  },
  inViewport: function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return (rect.top >= 0 || rect.bottom >= 0) && (rect.top <= window.innerHeight || rect.bottom <= window.innerHeight);
  },
  viewable: function(el) {
    var diff, elMiddle, height, max, nonabs, perc, rect, winMiddle;
    rect = el.getBoundingClientRect();
    height = rect.bottom - rect.top;
    elMiddle = rect.top + height / 2;
    winMiddle = window.innerHeight / 2;
    max = window.innerHeight / 2 + height / 2;
    diff = winMiddle - elMiddle;
    perc = 100 - Math.abs(diff) * 100 / max;
    nonabs = Math.abs(diff) * 100 / max;
    if (diff < 0) {
      nonabs = -nonabs;
    }
    return [perc, nonabs];
  }
};

//# sourceMappingURL=data:application/json;base64,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QW5CLElBQWtDLElBQUksQ0FBQyxNQUFMLElBQWUsTUFBTSxDQUFDLFdBQXpEO0VBTlEsQ0F6RVo7RUFrRkEsUUFBQSxFQUFVLFNBQUMsRUFBRDtBQUNSLFFBQUE7SUFBQSxJQUFBLEdBQU8sRUFBRSxDQUFDLHFCQUFILENBQUE7SUFDUCxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQUwsR0FBWSxJQUFJLENBQUM7SUFFMUIsUUFBQSxHQUFXLElBQUksQ0FBQyxHQUFMLEdBQVcsTUFBQSxHQUFPO0lBQzdCLFNBQUEsR0FBWSxNQUFNLENBQUMsV0FBUCxHQUFtQjtJQUMvQixHQUFBLEdBQU0sTUFBTSxDQUFDLFdBQVAsR0FBbUIsQ0FBbkIsR0FBdUIsTUFBQSxHQUFPO0lBQ3BDLElBQUEsR0FBTyxTQUFBLEdBQVU7SUFDakIsSUFBQSxHQUFPLEdBQUEsR0FBTSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQVQsQ0FBQSxHQUFlLEdBQWYsR0FBbUI7SUFDaEMsTUFBQSxHQUFTLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBVCxDQUFBLEdBQWUsR0FBZixHQUFtQjtJQUM1QixJQUFvQixJQUFBLEdBQU8sQ0FBM0I7TUFBQSxNQUFBLEdBQVMsQ0FBQyxPQUFWOztBQUVBLFdBQU8sQ0FBQyxJQUFELEVBQU8sTUFBUDtFQVpDLENBbEZWIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiSW5kZXggPVxuXG4gIHZhbHM6IFtdXG4gIGNhY2hlOlxuICAgIHdpbmRvdzogd2luZG93XG4gICAgc3RpY2tpZWQ6IGZhbHNlXG5cbiAgaTogLT5cblxuICAgIEluZGV4LmNhY2hlLndpbmRvdyA9ICQod2luZG93KVxuXG4gICAgSW5kZXguaGFuZGxlcnMoKVxuXG4gICAgaWYgSW5kZXguY2FjaGUud2luZG93LndpZHRoKCkgPiAxMDAwXG4gICAgICBzZXRJbnRlcnZhbCBJbmRleC5oZWFkZXIsIDIwXG5cbiAgICBzZXRJbnRlcnZhbCBJbmRleC5jaGVjaywgMTBcblxuICAgIGlmIGxvY2F0aW9uLmhhc2ggaXNudCAnJ1xuICAgICAgXy5vbiBcIi5vcHRpb25fI3tsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCcnKX1cIlxuXG5cbiAgaGFuZGxlcnM6IC0+XG5cbiAgICAkKCdoZWFkZXIgPiAuaW5uZXIgPiAubWVudSA+IC5vcHRpb24nKS5jbGljayBJbmRleC5vcHRpb25cblxuXG4gIG9wdGlvbjooZSkgLT5cbiAgICBoYXNoID0gJCh0aGlzKS5odG1sKClcbiAgICBfLm9mZiAnaGVhZGVyID4gLmlubmVyID4gLm1lbnUgPiAub3B0aW9uJ1xuICAgIF8ub24gXCIub3B0aW9uXyN7aGFzaH1cIlxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGxvY2F0aW9uLmhhc2ggPSBoYXNoXG4gICAgJCgnaHRtbCwgYm9keScpLnNjcm9sbFRvIFwiIyN7aGFzaH1cIixcbiAgICAgIG9mZnNldDogLTYwXG5cbiAgaGVhZGVyOiAtPlxuXG4gICAgc3RpY2t5U3BvdCA9IDIwMFxuXG4gICAgaWYgSW5kZXguY2FjaGUud2luZG93LnNjcm9sbFRvcCgpID4gc3RpY2t5U3BvdCBhbmQgSW5kZXguY2FjaGUuc3RpY2tpZWQgaXMgZmFsc2VcbiAgICAgIF8ub24gJyNzdGlja3knXG4gICAgICBJbmRleC5jYWNoZS5zdGlja2llZCA9IHRydWVcblxuICAgIGlmIEluZGV4LmNhY2hlLndpbmRvdy5zY3JvbGxUb3AoKSA8IHN0aWNreVNwb3QgYW5kIEluZGV4LmNhY2hlLnN0aWNraWVkIGlzIHRydWVcbiAgICAgIF8ub2ZmICcjc3RpY2t5J1xuICAgICAgSW5kZXguY2FjaGUuc3RpY2tpZWQgPSBvZmZcblxuICBjaGVjazogLT5cblxuXG4gICAgJCgnLmxheGluJykuZWFjaCAoaSwgZWwpIC0+XG5cbiAgICAgIGlmIEluZGV4LmluVmlld3BvcnQgZWxcbiAgICAgICAgW3BlcmMsIGRpZmZdID0gSW5kZXgudmlld2FibGUgZWxcbiAgICAgICAgamVsID0gJChlbClcblxuICAgICAgICB0aHJlc2ggPSBqZWwuZGF0YSAndGhyZXNoJ1xuICAgICAgICB0aHJlc2ggPSA1MCBpZiB0aHJlc2ggaXMgdW5kZWZpbmVkXG5cbiAgICAgICAgaWYgcGVyYyA+IHRocmVzaCBhbmQgamVsLmhhc0NsYXNzICdvZmYnXG4gICAgICAgICAgXy5vbiBqZWxcbiAgICAgICAgaWYgcGVyYyA8IHRocmVzaCBhbmQgamVsLmhhc0NsYXNzICdvbidcbiAgICAgICAgICBfLm9mZiBqZWxcblxuICAgICAgICBpZiBJbmRleC5jYWNoZS53aW5kb3cud2lkdGgoKSA+IDEwMDBcbiAgICAgICAgICBpZiBqZWwuaGFzQ2xhc3MgJ2xheGluX3ZlcnQnXG4gICAgICAgICAgICB2YWwgPSBNYXRoLnJvdW5kKGRpZmYpXG4gICAgICAgICAgICBpZiBJbmRleC52YWxzP1tpXSBpc250IHZhbFxuICAgICAgICAgICAgICBqZWwuZmluZCgnLmlubmVyOmZpcnN0JykuY3NzICd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZTNkKDAsICN7dmFsKjN9cHgsIDBweClcIlxuICAgICAgICAgICAgICBqZWwuZmluZCgnLm92ZXJsYXknKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlM2QoMCwgI3t2YWx9cHgsIDBweClcIlxuICAgICAgICAgICAgICBqZWwuZmluZCgnLm92ZXJsYXkgPiAuaW5uZXInKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlM2QoMCwgI3t2YWwvNH1weCwgMHB4KVwiXG4gICAgICAgICAgICAgIEluZGV4LnZhbHNbaV0gPSB2YWxcblxuICAgXG4gIGluVmlld3BvcnQ6IChlbCkgLT5cblxuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgcmV0dXJuKFxuICAgICAgKHJlY3QudG9wID49IDAgfHwgcmVjdC5ib3R0b20gPj0gMCkgJiZcbiAgICAgIChyZWN0LnRvcCA8PSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgcmVjdC5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0KVxuICAgIClcblxuICB2aWV3YWJsZTogKGVsKSAtPlxuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGhlaWdodCA9IHJlY3QuYm90dG9tLXJlY3QudG9wXG5cbiAgICBlbE1pZGRsZSA9IHJlY3QudG9wICsgaGVpZ2h0LzJcbiAgICB3aW5NaWRkbGUgPSB3aW5kb3cuaW5uZXJIZWlnaHQvMlxuICAgIG1heCA9IHdpbmRvdy5pbm5lckhlaWdodC8yICsgaGVpZ2h0LzJcbiAgICBkaWZmID0gd2luTWlkZGxlLWVsTWlkZGxlXG4gICAgcGVyYyA9IDEwMCAtIE1hdGguYWJzKGRpZmYpKjEwMC9tYXhcbiAgICBub25hYnMgPSBNYXRoLmFicyhkaWZmKSoxMDAvbWF4XG4gICAgbm9uYWJzID0gLW5vbmFicyBpZiBkaWZmIDwgMFxuXG4gICAgcmV0dXJuIFtwZXJjLCBub25hYnNdXG4iXX0=
