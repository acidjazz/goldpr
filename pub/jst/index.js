var Index;

Index = {
  i: function() {
    Index.handlers();
    return setInterval(Index.check, 50);
  },
  handlers: function() {
    return $('header > .menu > .option').click(Index.option);
  },
  option: function() {
    var dest, hashTagActive;
    if (hashTagActive !== this.hash) {
      event.preventDefault();
      dest = 0;
      if ($(this.hash).offset().top > $(document).height() - $(window).height()) {
        dest = $(document).height() - $(window).height();
      } else {
        dest = $(this.hash).offset().top;
      }
      $('html,body').animate({
        scrollTop: dest - 50
      }, 1000, 'swing');
      hashTagActive = this.hash;
      return location.hash = this.hash;
    }
  },
  check: function() {
    return $('.laxin').each(function(i, el) {
      var perc, thresh;
      if (Index.inViewport(el)) {
        perc = Index.viewable(el);
        thresh = $(el).data('thresh');
        if (thresh === void 0) {
          thresh = 50;
        }
        if (perc > thresh && $(el).hasClass('off')) {
          _.on($(el));
        }
        if (perc < thresh && $(el).hasClass('on')) {
          return _.off($(el));
        }
      }
    });
  },
  inViewport: function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return (rect.top >= 0 || rect.bottom >= 0) && (rect.top <= window.innerHeight || rect.bottom <= window.innerHeight);
  },
  viewable: function(el) {
    var diff, elMiddle, height, max, perc, rect, winMiddle;
    rect = el.getBoundingClientRect();
    height = rect.bottom - rect.top;
    elMiddle = rect.top + height / 2;
    winMiddle = window.innerHeight / 2;
    max = window.innerHeight / 2 + height / 2;
    diff = Math.abs(winMiddle - elMiddle);
    perc = Math.round(100 - diff * 100 / max);
    return perc;
  }
};

//# sourceMappingURL=data:application/json;base64,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O0lBQ1AsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFMLEdBQVksSUFBSSxDQUFDO0lBRTFCLFFBQUEsR0FBVyxJQUFJLENBQUMsR0FBTCxHQUFXLE1BQUEsR0FBTztJQUM3QixTQUFBLEdBQVksTUFBTSxDQUFDLFdBQVAsR0FBbUI7SUFDL0IsR0FBQSxHQUFNLE1BQU0sQ0FBQyxXQUFQLEdBQW1CLENBQW5CLEdBQXVCLE1BQUEsR0FBTztJQUNwQyxJQUFBLEdBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBUyxTQUFBLEdBQVUsUUFBbkI7SUFDUCxJQUFBLEdBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFBLEdBQU0sSUFBQSxHQUFLLEdBQUwsR0FBUyxHQUExQjtBQUVQLFdBQU87RUFWQyxDQTlDViIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkluZGV4ID1cblxuICBpOiAtPlxuICAgIEluZGV4LmhhbmRsZXJzKClcblxuICAgIHNldEludGVydmFsIEluZGV4LmNoZWNrLCA1MFxuXG4gIGhhbmRsZXJzOiAtPlxuXG4gICAgJCgnaGVhZGVyID4gLm1lbnUgPiAub3B0aW9uJykuY2xpY2sgSW5kZXgub3B0aW9uXG5cbiAgb3B0aW9uOiAtPlxuICAgIGlmIGhhc2hUYWdBY3RpdmUgIT0gQGhhc2hcbiAgICAgICN0aGlzIHdpbGwgcHJldmVudCBpZiB0aGUgdXNlciBjbGljayBzZXZlcmFsIHRpbWVzIHRoZSBzYW1lIGxpbmsgdG8gZnJlZXplIHRoZSBzY3JvbGwuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAjY2FsY3VsYXRlIGRlc3RpbmF0aW9uIHBsYWNlXG4gICAgICBkZXN0ID0gMFxuICAgICAgaWYgJChAaGFzaCkub2Zmc2V0KCkudG9wID4gJChkb2N1bWVudCkuaGVpZ2h0KCkgLSAkKHdpbmRvdykuaGVpZ2h0KClcbiAgICAgICAgZGVzdCA9ICQoZG9jdW1lbnQpLmhlaWdodCgpIC0gJCh3aW5kb3cpLmhlaWdodCgpXG4gICAgICBlbHNlXG4gICAgICAgIGRlc3QgPSAkKEBoYXNoKS5vZmZzZXQoKS50b3BcbiAgICAgICNnbyB0byBkZXN0aW5hdGlvblxuICAgICAgJCgnaHRtbCxib2R5JykuYW5pbWF0ZSB7IHNjcm9sbFRvcDogZGVzdC01MCB9LCAxMDAwLCAnc3dpbmcnXG4gICAgICBoYXNoVGFnQWN0aXZlID0gQGhhc2hcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBAaGFzaFxuXG4gIGNoZWNrOiAtPlxuXG4gICAgJCgnLmxheGluJykuZWFjaCAoaSwgZWwpIC0+XG4gICAgICBpZiBJbmRleC5pblZpZXdwb3J0IGVsXG4gICAgICAgIHBlcmMgPSBJbmRleC52aWV3YWJsZSBlbFxuICAgICAgICB0aHJlc2ggPSAkKGVsKS5kYXRhICd0aHJlc2gnXG4gICAgICAgIHRocmVzaCA9IDUwIGlmIHRocmVzaCBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgcGVyYyA+IHRocmVzaCBhbmQgJChlbCkuaGFzQ2xhc3MgJ29mZidcbiAgICAgICAgICBfLm9uICQoZWwpXG4gICAgICAgIGlmIHBlcmMgPCB0aHJlc2ggYW5kICQoZWwpLmhhc0NsYXNzICdvbidcbiAgICAgICAgICBfLm9mZiAkKGVsKVxuXG4gICBcbiAgaW5WaWV3cG9ydDogKGVsKSAtPlxuXG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICByZXR1cm4oXG4gICAgICAocmVjdC50b3AgPj0gMCB8fCByZWN0LmJvdHRvbSA+PSAwKSAmJlxuICAgICAgKHJlY3QudG9wIDw9IHdpbmRvdy5pbm5lckhlaWdodCB8fCByZWN0LmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgKVxuXG4gIHZpZXdhYmxlOiAoZWwpIC0+XG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaGVpZ2h0ID0gcmVjdC5ib3R0b20tcmVjdC50b3BcblxuICAgIGVsTWlkZGxlID0gcmVjdC50b3AgKyBoZWlnaHQvMlxuICAgIHdpbk1pZGRsZSA9IHdpbmRvdy5pbm5lckhlaWdodC8yXG4gICAgbWF4ID0gd2luZG93LmlubmVySGVpZ2h0LzIgKyBoZWlnaHQvMlxuICAgIGRpZmYgPSBNYXRoLmFicyh3aW5NaWRkbGUtZWxNaWRkbGUpXG4gICAgcGVyYyA9IE1hdGgucm91bmQgMTAwIC0gZGlmZioxMDAvbWF4XG5cbiAgICByZXR1cm4gcGVyY1xuIl19
