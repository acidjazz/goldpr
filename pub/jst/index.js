var Index;

Index = {
  cache: {
    window: window,
    stickied: false
  },
  i: function() {
    Index.cache.window = $(window);
    Index.handlers();
    if ($(window).width() > 1000) {
      setInterval(Index.header, 20);
    }
    setInterval(Index.check, 20);
    if (location.hash !== '') {
      return _.on(".option_" + (location.hash.replace('#', '')));
    }
  },
  handlers: function() {
    return $('header > .inner > .menu > .option').click(Index.option);
  },
  option: function(e) {
    var hash;
    hash = $(this).html();
    _.off('header > .inner > .menu > .option');
    _.on(".option_" + hash);
    e.preventDefault();
    location.hash = hash;
    return $('html, body').scrollTo("#" + hash, {
      offset: -60
    });
  },
  header: function() {
    var stickySpot;
    stickySpot = 200;
    if (Index.cache.window.scrollTop() > stickySpot && Index.cache.stickied === false) {
      _.on('#sticky');
      Index.cache.stickied = true;
    }
    if (Index.cache.window.scrollTop() < stickySpot && Index.cache.stickied === true) {
      _.off('#sticky');
      return Index.cache.stickied = false;
    }
  },
  check: function() {
    return $('.laxin').each(function(i, el) {
      var diff, jel, perc, ref, thresh;
      if (Index.inViewport(el)) {
        ref = Index.viewable(el), perc = ref[0], diff = ref[1];
        jel = $(el);
        thresh = jel.data('thresh');
        if (thresh === void 0) {
          thresh = 50;
        }
        if (perc > thresh && jel.hasClass('off')) {
          _.on(jel);
        }
        if (perc < thresh && jel.hasClass('on')) {
          _.off(jel);
        }
        if (jel.hasClass('laxin_vert')) {
          jel.find('.inner:first').css('transform', "translate(0, " + (diff * 3) + "px)");
          jel.find('.overlay').css('transform', "translate(0, " + diff + "px)");
          return jel.find('.overlay > .inner').css('transform', "translate(0, " + (diff / 3) + "px)");
        }
      }
    });
  },
  inViewport: function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return (rect.top >= 0 || rect.bottom >= 0) && (rect.top <= window.innerHeight || rect.bottom <= window.innerHeight);
  },
  viewable: function(el) {
    var diff, elMiddle, height, max, nonabs, perc, rect, winMiddle;
    rect = el.getBoundingClientRect();
    height = rect.bottom - rect.top;
    elMiddle = rect.top + height / 2;
    winMiddle = window.innerHeight / 2;
    max = window.innerHeight / 2 + height / 2;
    diff = winMiddle - elMiddle;
    perc = 100 - Math.abs(diff) * 100 / max;
    nonabs = Math.abs(diff) * 100 / max;
    if (diff < 0) {
      nonabs = -nonabs;
    }
    return [perc, nonabs];
  }
};

//# sourceMappingURL=data:application/json;base64,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R0FBWSxNQUFNLENBQUMsV0FBUCxHQUFtQjtJQUMvQixHQUFBLEdBQU0sTUFBTSxDQUFDLFdBQVAsR0FBbUIsQ0FBbkIsR0FBdUIsTUFBQSxHQUFPO0lBQ3BDLElBQUEsR0FBTyxTQUFBLEdBQVU7SUFDakIsSUFBQSxHQUFPLEdBQUEsR0FBTSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQVQsQ0FBQSxHQUFlLEdBQWYsR0FBbUI7SUFDaEMsTUFBQSxHQUFTLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBVCxDQUFBLEdBQWUsR0FBZixHQUFtQjtJQUM1QixJQUFvQixJQUFBLEdBQU8sQ0FBM0I7TUFBQSxNQUFBLEdBQVMsQ0FBQyxPQUFWOztBQUVBLFdBQU8sQ0FBQyxJQUFELEVBQU8sTUFBUDtFQVpDLENBL0VWIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiSW5kZXggPVxuXG4gIGNhY2hlOlxuICAgIHdpbmRvdzogd2luZG93XG4gICAgc3RpY2tpZWQ6IGZhbHNlXG5cbiAgaTogLT5cblxuICAgIEluZGV4LmNhY2hlLndpbmRvdyA9ICQod2luZG93KVxuXG4gICAgSW5kZXguaGFuZGxlcnMoKVxuXG4gICAgaWYgJCh3aW5kb3cpLndpZHRoKCkgPiAxMDAwXG4gICAgICBzZXRJbnRlcnZhbCBJbmRleC5oZWFkZXIsIDIwXG5cbiAgICBzZXRJbnRlcnZhbCBJbmRleC5jaGVjaywgMjBcblxuICAgIGlmIGxvY2F0aW9uLmhhc2ggaXNudCAnJ1xuICAgICAgXy5vbiBcIi5vcHRpb25fI3tsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCcnKX1cIlxuXG5cbiAgaGFuZGxlcnM6IC0+XG5cbiAgICAkKCdoZWFkZXIgPiAuaW5uZXIgPiAubWVudSA+IC5vcHRpb24nKS5jbGljayBJbmRleC5vcHRpb25cblxuXG4gIG9wdGlvbjooZSkgLT5cbiAgICBoYXNoID0gJCh0aGlzKS5odG1sKClcbiAgICBfLm9mZiAnaGVhZGVyID4gLmlubmVyID4gLm1lbnUgPiAub3B0aW9uJ1xuICAgIF8ub24gXCIub3B0aW9uXyN7aGFzaH1cIlxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGxvY2F0aW9uLmhhc2ggPSBoYXNoXG4gICAgJCgnaHRtbCwgYm9keScpLnNjcm9sbFRvIFwiIyN7aGFzaH1cIixcbiAgICAgIG9mZnNldDogLTYwXG5cbiAgaGVhZGVyOiAtPlxuXG4gICAgc3RpY2t5U3BvdCA9IDIwMFxuXG4gICAgaWYgSW5kZXguY2FjaGUud2luZG93LnNjcm9sbFRvcCgpID4gc3RpY2t5U3BvdCBhbmQgSW5kZXguY2FjaGUuc3RpY2tpZWQgaXMgZmFsc2VcbiAgICAgIF8ub24gJyNzdGlja3knXG4gICAgICBJbmRleC5jYWNoZS5zdGlja2llZCA9IHRydWVcblxuICAgIGlmIEluZGV4LmNhY2hlLndpbmRvdy5zY3JvbGxUb3AoKSA8IHN0aWNreVNwb3QgYW5kIEluZGV4LmNhY2hlLnN0aWNraWVkIGlzIHRydWVcbiAgICAgIF8ub2ZmICcjc3RpY2t5J1xuICAgICAgSW5kZXguY2FjaGUuc3RpY2tpZWQgPSBvZmZcblxuICBjaGVjazogLT5cblxuICAgICQoJy5sYXhpbicpLmVhY2ggKGksIGVsKSAtPlxuXG4gICAgICBpZiBJbmRleC5pblZpZXdwb3J0IGVsXG4gICAgICAgIFtwZXJjLCBkaWZmXSA9IEluZGV4LnZpZXdhYmxlIGVsXG4gICAgICAgIGplbCA9ICQoZWwpXG5cbiAgICAgICAgdGhyZXNoID0gamVsLmRhdGEgJ3RocmVzaCdcbiAgICAgICAgdGhyZXNoID0gNTAgaWYgdGhyZXNoIGlzIHVuZGVmaW5lZFxuXG4gICAgICAgIGlmIHBlcmMgPiB0aHJlc2ggYW5kIGplbC5oYXNDbGFzcyAnb2ZmJ1xuICAgICAgICAgIF8ub24gamVsXG4gICAgICAgIGlmIHBlcmMgPCB0aHJlc2ggYW5kIGplbC5oYXNDbGFzcyAnb24nXG4gICAgICAgICAgXy5vZmYgamVsXG5cbiAgICAgICAgaWYgamVsLmhhc0NsYXNzICdsYXhpbl92ZXJ0J1xuICAgICAgICAgIGplbC5maW5kKCcuaW5uZXI6Zmlyc3QnKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlKDAsICN7ZGlmZiozfXB4KVwiXG4gICAgICAgICAgamVsLmZpbmQoJy5vdmVybGF5JykuY3NzICd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZSgwLCAje2RpZmZ9cHgpXCJcbiAgICAgICAgICBqZWwuZmluZCgnLm92ZXJsYXkgPiAuaW5uZXInKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlKDAsICN7ZGlmZi8zfXB4KVwiXG5cblxuXG5cbiAgIFxuICBpblZpZXdwb3J0OiAoZWwpIC0+XG5cbiAgICByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIHJldHVybihcbiAgICAgIChyZWN0LnRvcCA+PSAwIHx8IHJlY3QuYm90dG9tID49IDApICYmXG4gICAgICAocmVjdC50b3AgPD0gd2luZG93LmlubmVySGVpZ2h0IHx8IHJlY3QuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodClcbiAgICApXG5cbiAgdmlld2FibGU6IChlbCkgLT5cbiAgICByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBoZWlnaHQgPSByZWN0LmJvdHRvbS1yZWN0LnRvcFxuXG4gICAgZWxNaWRkbGUgPSByZWN0LnRvcCArIGhlaWdodC8yXG4gICAgd2luTWlkZGxlID0gd2luZG93LmlubmVySGVpZ2h0LzJcbiAgICBtYXggPSB3aW5kb3cuaW5uZXJIZWlnaHQvMiArIGhlaWdodC8yXG4gICAgZGlmZiA9IHdpbk1pZGRsZS1lbE1pZGRsZVxuICAgIHBlcmMgPSAxMDAgLSBNYXRoLmFicyhkaWZmKSoxMDAvbWF4XG4gICAgbm9uYWJzID0gTWF0aC5hYnMoZGlmZikqMTAwL21heFxuICAgIG5vbmFicyA9IC1ub25hYnMgaWYgZGlmZiA8IDBcblxuICAgIHJldHVybiBbcGVyYywgbm9uYWJzXVxuIl19
