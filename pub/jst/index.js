var Index;

Index = {
  vals: [],
  cache: {
    window: window,
    stickied: false
  },
  i: function() {
    Index.cache.window = $(window);
    Index.handlers();
    setInterval(Index.check, 10);
    if (location.hash !== '') {
      return _.on(".option_" + (location.hash.replace('#', '')));
    }
  },
  handlers: function() {
    return $('header > .inner > .menu > .option').click(Index.option);
  },
  option: function(e) {
    var hash;
    hash = $(this).html();
    _.off('header > .inner > .menu > .option');
    _.on(".option_" + hash);
    e.preventDefault();
    location.hash = hash;
    return $('html, body').scrollTo("#" + hash, {
      offset: -60
    });
  },
  header: function() {
    var stickySpot;
    stickySpot = 200;
    if (Index.cache.window.scrollTop() > stickySpot && Index.cache.stickied === false) {
      _.on('#sticky');
      Index.cache.stickied = true;
    }
    if (Index.cache.window.scrollTop() < stickySpot && Index.cache.stickied === true) {
      _.off('#sticky');
      return Index.cache.stickied = false;
    }
  },
  check: function() {
    return $('.laxin').each(function(i, el) {
      var diff, jel, perc, ref, ref1, thresh, val;
      if (Index.inViewport(el)) {
        ref = Index.viewable(el), perc = ref[0], diff = ref[1];
        jel = $(el);
        thresh = jel.data('thresh');
        if (thresh === void 0) {
          thresh = 50;
        }
        if (perc > thresh && jel.hasClass('off')) {
          _.on(jel);
        }
        if (perc < thresh && jel.hasClass('on')) {
          _.off(jel);
        }
        if (Index.cache.window.width() > 1000) {
          if (jel.hasClass('laxin_vert')) {
            val = Math.round(diff);
            if (((ref1 = Index.vals) != null ? ref1[i] : void 0) !== val * 3) {
              jel.find('.inner:first').css('transform', "translate3d(0, " + (val * 3) + "px, 0px)");
              jel.find('.overlay').css('transform', "translate3d(0, " + (val * 2) + "px, 0px)");
              jel.find('.overlay > .inner').css('transform', "translate3d(0, " + (val / 5) + "px, 0px)");
              return Index.vals[i] = val * 3;
            }
          }
        }
      }
    });
  },
  inViewport: function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return (rect.top >= 0 || rect.bottom >= 0) && (rect.top <= window.innerHeight || rect.bottom <= window.innerHeight);
  },
  viewable: function(el) {
    var diff, elMiddle, height, max, nonabs, perc, rect, winMiddle;
    rect = el.getBoundingClientRect();
    height = rect.bottom - rect.top;
    elMiddle = rect.top + height / 2;
    winMiddle = window.innerHeight / 2;
    max = window.innerHeight / 2 + height / 2;
    diff = winMiddle - elMiddle;
    perc = 100 - Math.abs(diff) * 100 / max;
    nonabs = Math.abs(diff) * 100 / max;
    if (diff < 0) {
      nonabs = -nonabs;
    }
    return [perc, nonabs];
  }
};

//# sourceMappingURL=data:application/json;base64,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LEVBQUQ7QUFDUixRQUFBO0lBQUEsSUFBQSxHQUFPLEVBQUUsQ0FBQyxxQkFBSCxDQUFBO0lBQ1AsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFMLEdBQVksSUFBSSxDQUFDO0lBRTFCLFFBQUEsR0FBVyxJQUFJLENBQUMsR0FBTCxHQUFXLE1BQUEsR0FBTztJQUM3QixTQUFBLEdBQVksTUFBTSxDQUFDLFdBQVAsR0FBbUI7SUFDL0IsR0FBQSxHQUFNLE1BQU0sQ0FBQyxXQUFQLEdBQW1CLENBQW5CLEdBQXVCLE1BQUEsR0FBTztJQUNwQyxJQUFBLEdBQU8sU0FBQSxHQUFVO0lBQ2pCLElBQUEsR0FBTyxHQUFBLEdBQU0sSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFULENBQUEsR0FBZSxHQUFmLEdBQW1CO0lBQ2hDLE1BQUEsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQVQsQ0FBQSxHQUFlLEdBQWYsR0FBbUI7SUFDNUIsSUFBb0IsSUFBQSxHQUFPLENBQTNCO01BQUEsTUFBQSxHQUFTLENBQUMsT0FBVjs7QUFFQSxXQUFPLENBQUMsSUFBRCxFQUFPLE1BQVA7RUFaQyxDQWhGViIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkluZGV4ID1cblxuICB2YWxzOiBbXVxuICBjYWNoZTpcbiAgICB3aW5kb3c6IHdpbmRvd1xuICAgIHN0aWNraWVkOiBmYWxzZVxuXG4gIGk6IC0+XG5cbiAgICBJbmRleC5jYWNoZS53aW5kb3cgPSAkKHdpbmRvdylcblxuICAgIEluZGV4LmhhbmRsZXJzKClcblxuICAgICNpZiBJbmRleC5jYWNoZS53aW5kb3cud2lkdGgoKSA+IDEwMDBcbiAgICAjICBzZXRJbnRlcnZhbCBJbmRleC5oZWFkZXIsIDIwXG5cbiAgICBzZXRJbnRlcnZhbCBJbmRleC5jaGVjaywgMTBcblxuICAgIGlmIGxvY2F0aW9uLmhhc2ggaXNudCAnJ1xuICAgICAgXy5vbiBcIi5vcHRpb25fI3tsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCcnKX1cIlxuXG5cbiAgaGFuZGxlcnM6IC0+XG5cbiAgICAkKCdoZWFkZXIgPiAuaW5uZXIgPiAubWVudSA+IC5vcHRpb24nKS5jbGljayBJbmRleC5vcHRpb25cblxuICBvcHRpb246KGUpIC0+XG4gICAgaGFzaCA9ICQodGhpcykuaHRtbCgpXG4gICAgXy5vZmYgJ2hlYWRlciA+IC5pbm5lciA+IC5tZW51ID4gLm9wdGlvbidcbiAgICBfLm9uIFwiLm9wdGlvbl8je2hhc2h9XCJcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsb2NhdGlvbi5oYXNoID0gaGFzaFxuICAgICQoJ2h0bWwsIGJvZHknKS5zY3JvbGxUbyBcIiMje2hhc2h9XCIsXG4gICAgICBvZmZzZXQ6IC02MFxuXG4gIGhlYWRlcjogLT5cblxuICAgIHN0aWNreVNwb3QgPSAyMDBcblxuICAgIGlmIEluZGV4LmNhY2hlLndpbmRvdy5zY3JvbGxUb3AoKSA+IHN0aWNreVNwb3QgYW5kIEluZGV4LmNhY2hlLnN0aWNraWVkIGlzIGZhbHNlXG4gICAgICBfLm9uICcjc3RpY2t5J1xuICAgICAgSW5kZXguY2FjaGUuc3RpY2tpZWQgPSB0cnVlXG5cbiAgICBpZiBJbmRleC5jYWNoZS53aW5kb3cuc2Nyb2xsVG9wKCkgPCBzdGlja3lTcG90IGFuZCBJbmRleC5jYWNoZS5zdGlja2llZCBpcyB0cnVlXG4gICAgICBfLm9mZiAnI3N0aWNreSdcbiAgICAgIEluZGV4LmNhY2hlLnN0aWNraWVkID0gb2ZmXG5cbiAgY2hlY2s6IC0+XG5cblxuICAgICQoJy5sYXhpbicpLmVhY2ggKGksIGVsKSAtPlxuXG4gICAgICBpZiBJbmRleC5pblZpZXdwb3J0IGVsXG4gICAgICAgIFtwZXJjLCBkaWZmXSA9IEluZGV4LnZpZXdhYmxlIGVsXG4gICAgICAgIGplbCA9ICQoZWwpXG5cbiAgICAgICAgdGhyZXNoID0gamVsLmRhdGEgJ3RocmVzaCdcbiAgICAgICAgdGhyZXNoID0gNTAgaWYgdGhyZXNoIGlzIHVuZGVmaW5lZFxuXG4gICAgICAgIGlmIHBlcmMgPiB0aHJlc2ggYW5kIGplbC5oYXNDbGFzcyAnb2ZmJ1xuICAgICAgICAgIF8ub24gamVsXG4gICAgICAgIGlmIHBlcmMgPCB0aHJlc2ggYW5kIGplbC5oYXNDbGFzcyAnb24nXG4gICAgICAgICAgXy5vZmYgamVsXG5cbiAgICAgICAgaWYgSW5kZXguY2FjaGUud2luZG93LndpZHRoKCkgPiAxMDAwXG4gICAgICAgICAgaWYgamVsLmhhc0NsYXNzICdsYXhpbl92ZXJ0J1xuICAgICAgICAgICAgdmFsID0gTWF0aC5yb3VuZChkaWZmKVxuICAgICAgICAgICAgaWYgSW5kZXgudmFscz9baV0gaXNudCB2YWwqM1xuICAgICAgICAgICAgICBqZWwuZmluZCgnLmlubmVyOmZpcnN0JykuY3NzICd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZTNkKDAsICN7dmFsKjN9cHgsIDBweClcIlxuICAgICAgICAgICAgICBqZWwuZmluZCgnLm92ZXJsYXknKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlM2QoMCwgI3t2YWwqMn1weCwgMHB4KVwiXG4gICAgICAgICAgICAgIGplbC5maW5kKCcub3ZlcmxheSA+IC5pbm5lcicpLmNzcyAndHJhbnNmb3JtJywgXCJ0cmFuc2xhdGUzZCgwLCAje3ZhbC81fXB4LCAwcHgpXCJcbiAgICAgICAgICAgICAgSW5kZXgudmFsc1tpXSA9IHZhbCozXG4gICBcbiAgaW5WaWV3cG9ydDogKGVsKSAtPlxuXG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICByZXR1cm4oXG4gICAgICAocmVjdC50b3AgPj0gMCB8fCByZWN0LmJvdHRvbSA+PSAwKSAmJlxuICAgICAgKHJlY3QudG9wIDw9IHdpbmRvdy5pbm5lckhlaWdodCB8fCByZWN0LmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgKVxuXG4gIHZpZXdhYmxlOiAoZWwpIC0+XG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaGVpZ2h0ID0gcmVjdC5ib3R0b20tcmVjdC50b3BcblxuICAgIGVsTWlkZGxlID0gcmVjdC50b3AgKyBoZWlnaHQvMlxuICAgIHdpbk1pZGRsZSA9IHdpbmRvdy5pbm5lckhlaWdodC8yXG4gICAgbWF4ID0gd2luZG93LmlubmVySGVpZ2h0LzIgKyBoZWlnaHQvMlxuICAgIGRpZmYgPSB3aW5NaWRkbGUtZWxNaWRkbGVcbiAgICBwZXJjID0gMTAwIC0gTWF0aC5hYnMoZGlmZikqMTAwL21heFxuICAgIG5vbmFicyA9IE1hdGguYWJzKGRpZmYpKjEwMC9tYXhcbiAgICBub25hYnMgPSAtbm9uYWJzIGlmIGRpZmYgPCAwXG5cbiAgICByZXR1cm4gW3BlcmMsIG5vbmFic11cbiJdfQ==
