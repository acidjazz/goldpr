var Index;

Index = {
  vals: [],
  cache: {
    window: window,
    stickied: false
  },
  i: function() {
    Index.cache.window = $(window);
    Index.handlers();
    if (Index.cache.window.width() > 1000) {
      setInterval(Index.header, 50);
    }
    setInterval(Index.check, 10);
    if (location.hash !== '') {
      return _.on(".option_" + (location.hash.replace('#', '')));
    }
  },
  handlers: function() {
    return $('header > .inner > .menu > .option').click(Index.option);
  },
  option: function(e) {
    var hash;
    hash = $(this).html();
    _.off('header > .inner > .menu > .option');
    _.on(".option_" + hash);
    e.preventDefault();
    location.hash = hash;
    return $('html, body').scrollTo("#" + hash, {
      offset: -60
    });
  },
  header: function() {
    var stickySpot;
    stickySpot = 200;
    if (Index.cache.window.scrollTop() > stickySpot && Index.cache.stickied === false) {
      _.on('#sticky');
      Index.cache.stickied = true;
    }
    if (Index.cache.window.scrollTop() < stickySpot && Index.cache.stickied === true) {
      _.off('#sticky');
      return Index.cache.stickied = false;
    }
  },
  check: function() {
    return $('.laxin').each(function(i, el) {
      var diff, jel, perc, ref, ref1, thresh, val;
      if (Index.inViewport(el)) {
        ref = Index.viewable(el), perc = ref[0], diff = ref[1];
        jel = $(el);
        thresh = jel.data('thresh');
        if (thresh === void 0) {
          thresh = 50;
        }
        if (perc > thresh && jel.hasClass('off')) {
          _.on(jel);
        }
        if (perc < thresh && jel.hasClass('on')) {
          _.off(jel);
        }
        if (Index.cache.window.width() > 1000) {
          if (jel.hasClass('laxin_vert')) {
            val = Math.round(diff);
            if (((ref1 = Index.vals) != null ? ref1[i] : void 0) !== val * 3) {
              jel.find('.inner:first').css('transform', "translate3d(0, " + (val * 3) + "px, 0px)");
              jel.find('.overlay').css('transform', "translate3d(0, " + (val * 2) + "px, 0px)");
              jel.find('.overlay > .inner').css('transform', "translate3d(0, " + (val / 5) + "px, 0px)");
              return Index.vals[i] = val * 3;
            }
          }
        }
      }
    });
  },
  inViewport: function(el) {
    var rect;
    rect = el.getBoundingClientRect();
    return (rect.top >= 0 || rect.bottom >= 0) && (rect.top <= window.innerHeight || rect.bottom <= window.innerHeight);
  },
  viewable: function(el) {
    var diff, elMiddle, height, max, nonabs, perc, rect, winMiddle;
    rect = el.getBoundingClientRect();
    height = rect.bottom - rect.top;
    elMiddle = rect.top + height / 2;
    winMiddle = window.innerHeight / 2;
    max = window.innerHeight / 2 + height / 2;
    diff = winMiddle - elMiddle;
    perc = 100 - Math.abs(diff) * 100 / max;
    nonabs = Math.abs(diff) * 100 / max;
    if (diff < 0) {
      nonabs = -nonabs;
    }
    return [perc, nonabs];
  }
};

//# sourceMappingURL=data:application/json;base64,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Q0EsQ0FBQyxJQUFJLENBQUMsR0FBTCxJQUFZLE1BQU0sQ0FBQyxXQUFuQixJQUFrQyxJQUFJLENBQUMsTUFBTCxJQUFlLE1BQU0sQ0FBQyxXQUF6RDtFQU5RLENBdkVaO0VBZ0ZBLFFBQUEsRUFBVSxTQUFDLEVBQUQ7QUFDUixRQUFBO0lBQUEsSUFBQSxHQUFPLEVBQUUsQ0FBQyxxQkFBSCxDQUFBO0lBQ1AsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFMLEdBQVksSUFBSSxDQUFDO0lBRTFCLFFBQUEsR0FBVyxJQUFJLENBQUMsR0FBTCxHQUFXLE1BQUEsR0FBTztJQUM3QixTQUFBLEdBQVksTUFBTSxDQUFDLFdBQVAsR0FBbUI7SUFDL0IsR0FBQSxHQUFNLE1BQU0sQ0FBQyxXQUFQLEdBQW1CLENBQW5CLEdBQXVCLE1BQUEsR0FBTztJQUNwQyxJQUFBLEdBQU8sU0FBQSxHQUFVO0lBQ2pCLElBQUEsR0FBTyxHQUFBLEdBQU0sSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFULENBQUEsR0FBZSxHQUFmLEdBQW1CO0lBQ2hDLE1BQUEsR0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQVQsQ0FBQSxHQUFlLEdBQWYsR0FBbUI7SUFDNUIsSUFBb0IsSUFBQSxHQUFPLENBQTNCO01BQUEsTUFBQSxHQUFTLENBQUMsT0FBVjs7QUFFQSxXQUFPLENBQUMsSUFBRCxFQUFPLE1BQVA7RUFaQyxDQWhGViIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkluZGV4ID1cblxuICB2YWxzOiBbXVxuICBjYWNoZTpcbiAgICB3aW5kb3c6IHdpbmRvd1xuICAgIHN0aWNraWVkOiBmYWxzZVxuXG4gIGk6IC0+XG5cbiAgICBJbmRleC5jYWNoZS53aW5kb3cgPSAkKHdpbmRvdylcblxuICAgIEluZGV4LmhhbmRsZXJzKClcblxuICAgIGlmIEluZGV4LmNhY2hlLndpbmRvdy53aWR0aCgpID4gMTAwMFxuICAgICAgc2V0SW50ZXJ2YWwgSW5kZXguaGVhZGVyLCA1MFxuXG4gICAgc2V0SW50ZXJ2YWwgSW5kZXguY2hlY2ssIDEwXG5cbiAgICBpZiBsb2NhdGlvbi5oYXNoIGlzbnQgJydcbiAgICAgIF8ub24gXCIub3B0aW9uXyN7bG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywnJyl9XCJcblxuXG4gIGhhbmRsZXJzOiAtPlxuXG4gICAgJCgnaGVhZGVyID4gLmlubmVyID4gLm1lbnUgPiAub3B0aW9uJykuY2xpY2sgSW5kZXgub3B0aW9uXG5cbiAgb3B0aW9uOihlKSAtPlxuICAgIGhhc2ggPSAkKHRoaXMpLmh0bWwoKVxuICAgIF8ub2ZmICdoZWFkZXIgPiAuaW5uZXIgPiAubWVudSA+IC5vcHRpb24nXG4gICAgXy5vbiBcIi5vcHRpb25fI3toYXNofVwiXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgbG9jYXRpb24uaGFzaCA9IGhhc2hcbiAgICAkKCdodG1sLCBib2R5Jykuc2Nyb2xsVG8gXCIjI3toYXNofVwiLFxuICAgICAgb2Zmc2V0OiAtNjBcblxuICBoZWFkZXI6IC0+XG5cbiAgICBzdGlja3lTcG90ID0gMjAwXG5cbiAgICBpZiBJbmRleC5jYWNoZS53aW5kb3cuc2Nyb2xsVG9wKCkgPiBzdGlja3lTcG90IGFuZCBJbmRleC5jYWNoZS5zdGlja2llZCBpcyBmYWxzZVxuICAgICAgXy5vbiAnI3N0aWNreSdcbiAgICAgIEluZGV4LmNhY2hlLnN0aWNraWVkID0gdHJ1ZVxuXG4gICAgaWYgSW5kZXguY2FjaGUud2luZG93LnNjcm9sbFRvcCgpIDwgc3RpY2t5U3BvdCBhbmQgSW5kZXguY2FjaGUuc3RpY2tpZWQgaXMgdHJ1ZVxuICAgICAgXy5vZmYgJyNzdGlja3knXG4gICAgICBJbmRleC5jYWNoZS5zdGlja2llZCA9IG9mZlxuXG4gIGNoZWNrOiAtPlxuXG5cbiAgICAkKCcubGF4aW4nKS5lYWNoIChpLCBlbCkgLT5cblxuICAgICAgaWYgSW5kZXguaW5WaWV3cG9ydCBlbFxuICAgICAgICBbcGVyYywgZGlmZl0gPSBJbmRleC52aWV3YWJsZSBlbFxuICAgICAgICBqZWwgPSAkKGVsKVxuXG4gICAgICAgIHRocmVzaCA9IGplbC5kYXRhICd0aHJlc2gnXG4gICAgICAgIHRocmVzaCA9IDUwIGlmIHRocmVzaCBpcyB1bmRlZmluZWRcblxuICAgICAgICBpZiBwZXJjID4gdGhyZXNoIGFuZCBqZWwuaGFzQ2xhc3MgJ29mZidcbiAgICAgICAgICBfLm9uIGplbFxuICAgICAgICBpZiBwZXJjIDwgdGhyZXNoIGFuZCBqZWwuaGFzQ2xhc3MgJ29uJ1xuICAgICAgICAgIF8ub2ZmIGplbFxuXG4gICAgICAgIGlmIEluZGV4LmNhY2hlLndpbmRvdy53aWR0aCgpID4gMTAwMFxuICAgICAgICAgIGlmIGplbC5oYXNDbGFzcyAnbGF4aW5fdmVydCdcbiAgICAgICAgICAgIHZhbCA9IE1hdGgucm91bmQoZGlmZilcbiAgICAgICAgICAgIGlmIEluZGV4LnZhbHM/W2ldIGlzbnQgdmFsKjNcbiAgICAgICAgICAgICAgamVsLmZpbmQoJy5pbm5lcjpmaXJzdCcpLmNzcyAndHJhbnNmb3JtJywgXCJ0cmFuc2xhdGUzZCgwLCAje3ZhbCozfXB4LCAwcHgpXCJcbiAgICAgICAgICAgICAgamVsLmZpbmQoJy5vdmVybGF5JykuY3NzICd0cmFuc2Zvcm0nLCBcInRyYW5zbGF0ZTNkKDAsICN7dmFsKjJ9cHgsIDBweClcIlxuICAgICAgICAgICAgICBqZWwuZmluZCgnLm92ZXJsYXkgPiAuaW5uZXInKS5jc3MgJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlM2QoMCwgI3t2YWwvNX1weCwgMHB4KVwiXG4gICAgICAgICAgICAgIEluZGV4LnZhbHNbaV0gPSB2YWwqM1xuICAgXG4gIGluVmlld3BvcnQ6IChlbCkgLT5cblxuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgcmV0dXJuKFxuICAgICAgKHJlY3QudG9wID49IDAgfHwgcmVjdC5ib3R0b20gPj0gMCkgJiZcbiAgICAgIChyZWN0LnRvcCA8PSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgcmVjdC5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0KVxuICAgIClcblxuICB2aWV3YWJsZTogKGVsKSAtPlxuICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGhlaWdodCA9IHJlY3QuYm90dG9tLXJlY3QudG9wXG5cbiAgICBlbE1pZGRsZSA9IHJlY3QudG9wICsgaGVpZ2h0LzJcbiAgICB3aW5NaWRkbGUgPSB3aW5kb3cuaW5uZXJIZWlnaHQvMlxuICAgIG1heCA9IHdpbmRvdy5pbm5lckhlaWdodC8yICsgaGVpZ2h0LzJcbiAgICBkaWZmID0gd2luTWlkZGxlLWVsTWlkZGxlXG4gICAgcGVyYyA9IDEwMCAtIE1hdGguYWJzKGRpZmYpKjEwMC9tYXhcbiAgICBub25hYnMgPSBNYXRoLmFicyhkaWZmKSoxMDAvbWF4XG4gICAgbm9uYWJzID0gLW5vbmFicyBpZiBkaWZmIDwgMFxuXG4gICAgcmV0dXJuIFtwZXJjLCBub25hYnNdXG4iXX0=
